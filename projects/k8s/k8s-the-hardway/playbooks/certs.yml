- hosts: localhost
  become: true
  gather_facts: false
  vars_files:
    - vars/vars.yml
  tasks:
    ## Provision a CA
    ## https://github.com/kelseyhightower/kubernetes-the-hard-way/blob/master/docs/04-certificate-authority.md#certificate-authority
    - name: Generate the private CA key
      openssl_privatekey:
        force: false
        path: /etc/ssl/private/k8s_ca_key.pem
        size: 4096
        type: RSA

    - name: Generate the private CA CSR
      openssl_csr:
        common_name: Kubernetes          # CN
        country_name: US                 # C
        force: false
        locality_name: "Salt Lake City"  # L
        organization_name: Kubernetes    # O
        organizational_unit_name: CA     # OU
        path: /etc/ssl/certs/k8s_ca.csr
        privatekey_path: /etc/ssl/private/k8s_ca_key.pem
        state_or_province_name: UT       # ST

    ## Use selfsigned provider here
    - name: Generate the private CA Cert
      openssl_certificate:
        csr_path: /etc/ssl/certs/k8s_ca.csr
        force: false
        path: /etc/ssl/certs/k8s_ca.crt
        privatekey_path: /etc/ssl/private/k8s_ca_key.pem
        provider: selfsigned

    ## System
    - name: Generate K8s system keys
      openssl_privatekey:
        force: false
        path: /etc/ssl/private/k8s_{{ item.name }}_key.pem
        size: '{{ item.key_size }}'
        type: RSA
      loop: '{{ k8s_certs_system_config }}'

    - name: Generate the K8s system certs signing requests
      openssl_csr:
        country_name: '{{ item.country_name }}'
        force: false
        locality_name: '{{ item.locality_name }}'
        organization_name: '{{ item.organization_name }}'
        organizational_unit_name: '{{ item.organizational_unit_name }}'
        path: /etc/ssl/certs/k8s_{{ item.name }}.csr
        privatekey_path: /etc/ssl/private/k8s_{{ item.name }}_key.pem
      loop: '{{ k8s_certs_system_config }}'

    - name: Generate the K8s system certs
      openssl_certificate:
        csr_path: /etc/ssl/certs/k8s_{{ item.name }}.csr
        force: false
        ownca_path: /etc/ssl/certs/k8s_ca.crt
        ownca_privatekey_path: /etc/ssl/private/k8s_ca_key.pem
        path: /etc/ssl/certs/k8s_{{ item.name }}.crt
        privatekey_path: /etc/ssl/private/k8s_{{ item.name }}_key.pem
        provider: ownca
      loop: '{{ k8s_certs_system_config }}'

    ## Kubelets
    - name: Generate K8 kubelet keys
      openssl_privatekey:
        force: false
        path: /etc/ssl/private/k8s_kubelet_{{ item.name }}_key.pem
        size: '{{ item.key_size }}'
        type: RSA
      loop: '{{ k8s_certs_kubelet_config }}'

    - name: Generate the K8s kubelet certs signing requests
      openssl_csr:
        country_name: '{{ item.country_name }}'
        force: false
        locality_name: '{{ item.locality_name }}'
        organization_name: '{{ item.organization_name }}'
        organizational_unit_name: '{{ item.organizational_unit_name }}'
        path: /etc/ssl/certs/k8s_kubelet_{{ item.name }}.csr
        privatekey_path: /etc/ssl/private/k8s_kubelet_{{ item.name }}_key.pem
        subject_alt_name: '{{ item.dns }}'
      loop: '{{ k8s_certs_kubelet_config }}'

    - name: Generate the K8s kubelet certs
      openssl_certificate:
        csr_path: /etc/ssl/certs/k8s_kubelet_{{ item.name }}.csr
        force: false
        ownca_path: /etc/ssl/certs/k8s_ca.crt
        ownca_privatekey_path: /etc/ssl/private/k8s_ca_key.pem
        path: /etc/ssl/certs/k8s_kubelet_{{ item.name }}.crt
        privatekey_path: /etc/ssl/private/k8s_kubelet_{{ item.name }}_key.pem
        provider: ownca
      loop: '{{ k8s_certs_kubelet_config }}'
- hosts: k8s
  become: true
