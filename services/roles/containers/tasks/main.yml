- name: Create registry storage directory
  file:
    group: root
    mode: 0700
    owner: root
    path: /data/disks/registry/storage
    state: directory

- name: Create the registry auth directory
  file:
    group: root
    owner: root
    mode: 0700
    path: /data/disks/registry/auth
    state: directory

- name: Create the Portainer storage directory
  file:
    group: root
    path: /data/disks/config/portainer/storage
    mode: 0700
    owner: root
    state: directory

- name: Copy the registry auth file
  copy:
    decrypt: true
    dest: /data/disks/registry/auth/
    group: root
    owner: root
    mode: 0600
    src: files/htpasswd

- name: Copy the nginx conf file
  template:
    dest: /data/disks/nginx/conf/nginx.conf
    owner: root
    group: root
    mode: 0600
    src: templates/nginx.j2
  notify:
    - validate-nginx-conf
    - restart-nginx
## Start moving from Docker compose to standalone containers
- name: Start Drone Server
  docker_container:
    detach: true
    domainname: "{{ cicd.domainname }}"
    etc_hosts:
      git.sami.dog: 10.1.10.20
    env:
      DRONE_DATABASE_DATASOURCE: "/data/database.sqlite"
      DRONE_DATABASE_DRIVER: "sqlite3"
      DRONE_GIT_PASSWORD: "{{ cicd.gitpassword }}"
      DRONE_GIT_USERNAME: "{{ cicd.gitusername }}"
      DRONE_GITEA_CLIENT_ID: "{{ cicd.gitea_oauth_client_id }}"
      DRONE_GITEA_CLIENT_SECRET: "{{ cicd.gitea_oauth_client_secret }}"
      DRONE_GITEA_SERVER: "https://git.sami.dog:3000"
      DRONE_LOGS_DEBUG: "true"
      DRONE_RPC_SECRET: "{{ cicd.rpc_token }}"
      DRONE_SERVER_HOST: "{{ cicd.hostname }}.{{ cicd.domainname }}:10443"
      DRONE_SERVER_PROTO: "https"
      DRONE_SERVER_PORT: "10443"
      DRONE_TLS_CERT: "/certs/live/{{ cicd.hostname }}.{{cicd.domainname }}/fullchain.pem"
      DRONE_TLS_KEY: "/certs/live/{{ cicd.hostname }}.{{ cicd.domainname }}/privkey.pem"
      DRONE_USER_CREATE: "username:drone-cicd,admin:true,token:{{ cicd.rpc_token }}"
    hostname: "{{ cicd.hostname }}"
    image: "{{ cicd.image }}:{{ cicd.tag }}"
    mounts:
      - source: "{{ certpath }}"
        target: /certs
        type: bind
        read_only: true
      - source: drone-db
        target: /data
        type: volume
    name: "services_drone_server"
    network_mode: "bridge"
    ports:
      - "10443:443"
    restart_policy: "unless-stopped"
    state: "started"

- name: Render Dockerfile template
  template:
    group: root
    mode: 0644
    owner: root
    src: templates/docker-compose.j2
    dest: ./docker-compose.yml

- name: Deploy the containers
  docker_compose:
    project_src: .
    state: present
